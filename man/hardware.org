#+SETUPFILE: ./0orgsetup.org
#+TITLE: Hardware and Operating Systems

* Hardware
** Use of OS
OidaDB (as of now) makes heavy use of linux system calls. So don't try
to run this thing on a TI-89 calculator or even worse, don't try to
run it on Windows.

On a more specific note regarding which version of linux OidaDB
depends on is *Linux 3.17 and above* due to its use of the
=memfd_create= system call. This may change in the future. But as of
now that's what I'm writting down.

(note to self: when I eventually make use of =vsocks(7)=, this may up the
minimum version all the way up to 4.8)
** Use of External Code
OidaDB requires the following libraries to operate:

 - pthreads
 - libc (w/ =_GNU_SOURCE= due to use of non-POSIX Open file
   description locks, see =man fcntl=)

** Use of CPUs
** Use of Memory
** Use of Disk
** Use of External Processes (systemd, dbus, ect)
As of now, OidaDB is but a library. It is not an executable. So unless
I plan to incorporate a front-end specification to this manual, OidaDB
is agnostic to the enviroment processes.
* Pages
If you do not know what pages are in computer memory, then you have
some homework to do before really start utilizing OidaDB. In short:
all memory and all data on computer must be stored in blocks of memory
known as pages. The exact size of these pages depends on the computer,
but for nearly all modern computers, that size is 4KiB.

** Page-Load efficiency
To get the truely best speed and efficiency from OidaDB, it comes down
to your utilization of pages. Follow this rule:

 - *Bytes that's accessed at the same time should be on the same
   page.*

OidaDB allows you to follow this rule. OidaDB also allows you to take
advantage of the practical existance of pages. I have always disliked
how databases try to "hide" the importance of pages dispite the amount
of work that is put into moving them around.

If we have a user in a database, that user has some associated
information to them. Maybe even some many-to-many relationships with
other objects in our database. Lets explore this theoretical against
our rule:

 1. If we have a user, we shall also have his name, location,
    password, and email.
 2. How often do we access all of this information at once? Well very
    often, of course. I mean everytime they log in we have to pull
    most of it up just to allow it for them to log in. Thus, It's
    benificial to keep all this information on the same Object (which
    intern will be kept on the same page).
 3. How often do we access only parts of this information? Not very
    often. However, lets say we needed to make a very-active emailing
    script, if we kept all the information in one page, this would
    force our script to load all the user's data despite the fact we
    only need their email.
    - In that case, it may be a good idea to keep a seperate array
      that holds /just/ their emails so the script can work
      efficiently. Such a seperate array can just be updated the
      instant any email is updated in the user table (up-/down-stream
      relationship).

** Encrypted Pages
* System Communication
Here I'll let you in on the architecture of OidaDB and how the various
modules and softwares talk to eachother. I won't talk about exactly
what it is that's communicated, just the medium to how it is
communicated.

** Intra-host
Host processes typcially like to keep all the processing "in
house". That is, likes to use threads instead of processes. These are
known as workers, which we'll cover in detail later. 

So with the use of threads, intra-host communication comes down to
managing multiple threads with intra-process concurrency control.

** Inner-process/Intra-node
Inside of a given node we have a host process and 1-to-many handle
processes. The handle processes connect to the host and communicate
via shared memory. The module that handles this communication known as
=edbs=, which is one of the few bits of code shared between host and
handle.

 - See also: =man shm_overview=

** Inner-node/Intra-database
When you start to use more than 1 node, the exact means of
communication between these nodes starts to become much more
configuratble. This is where you can start to dictate what's best for
your database. You may set up 5 nodes in virtual enviroments on the
same machine, you may set up 5 nodes in the same rack, you may set up
5 nodes in the same country: all of which very in the best possible
way they could communicate.

So with that being said, nodes communicate via highly configruable
linux sockets. So while configuring your nodes, read up on =man
socket= and its various ways to communicate.

** Concurrency Controls
Concurrency control is by far the most complex element of any
high-performance database. The reaction to a mere suggestion of
high-performance concurrency will identify the boys from the men. If I
had limited this database to a single process and a single thread the
entire thing would be done in a few hours.

So believe me that concurrency control is of paramount importance to a
database. And it is with concurrency controls OidaDB obtains its
massive advantages. It takes months of planning, hours and hours of
drawing lines and boxes in dozends of notebooks, and waking up in the
middle of the nights reallizing previously unknown edgecases.

I'm not going to bore you with the details. Just know that when you
use this product your abilities of concurrency control to mine. This
topic is where OidaDB gets most of its value as a product but
ironically its the topic no one cares about.

But there's key terminology you should at least know of:

 - [[https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html][Mutexes]] (See chptr 4.12)
 - [[https://kernel.org/doc/ols/2002/ols2002-pages-479-495.pdf][Futexes]]
 - [[https://man7.org/linux/man-pages/man2/fcntl.2.html][Shared and Exclusive Locks]] (See Advisory record locking)
 - Clutch Locks (an invention of my own)

See Also:

 - [[https://github.com/torvalds/linux/blob/master/Documentation/locking/locktypes.rst][Linux Locking definitions]]

*** Clutch Locks
todo
