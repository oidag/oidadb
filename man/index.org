#+SETUPFILE: ./0orgsetup.org
#+TITLE: Introduction to liboidadb

* Introduction

OidaDB makes petabytes of data accessible to billions of devices. It
is used by engineers as virtual infrastructure for the flow of
information.

** Who this manual is for

This manual is for engineers who wish to incoporate OidaDB in their
software. This manual contains the comprehendsive (techical) abilities
of OidaDB. Whilest reading this manual, it is assumed that:

 - you have basic level understanding of the linux operating system,
 - you have basic level understanding of common IP protocols
   (UDP, TCP, DNS, ect).,
 - you have intermidate understanding of persistant storage systems
   (HDs vs SSDs, RAIDs, filesystems, ect); and,
 - you have an urge to optimize the user experiance and maximize the
   performance of your system.

If you have previous experiances with other database - such as MySQL,
Oracle, SAP, MongoDB, ect. - this will help you as I'll frequently be
referencing features from these products.  Otherwise, don't sweat
it. OidaDB is very unique in how it operates compared to these
technologies so there's lots of explaining to do regardless. With that
being said, lets look at the surface of what OidaDB is, what it aims
to do, what advantages and disadvantages it has (over other database
technology).

** Purpose of OidaDB

Let me breifly touch on why this was built. It all started with the
need of a database with a set of *features* (we'll touch on those
shortly): but no database existed. Provided such features were found
in some more nichely designed database technology. But I just wanted a
database that had ALL these features in 1 place.

Another annoyance with current database technology is how it sucked at
utilizing 100% of the *hardware* it was on. What I mean by this is, if
I have a multi-terabyte database loaded into a local sql-based engine;
I should be able to execute a select statement and see that the
statement utilizes 100% of all the CPUs on my machine until that
select statment finishes. But alas, it never does. Based case it
always just utilizes 100% of just 1 out of the 16 cpu cores I have on
my machine. This goes for many database: they all seem to handycap
themselves by being extreamly shy when it comes to using the hardware
that's availabe to them.

There was also always a lack of *tooling* - that is - software that
helps me use the database. Provided there are some FANTASTIC 3rd party
apps out there, but these 3rd party apps have the disadvantage for,
well, being 3rd party. The internals of one database can vastly differ
from the internals of another database. So if I wish to adequatly
optimize the database, or at the very least diagnose performance
problems, I was at the mercy of a quiet community, poor documentation,
and virtually no offical support. Which brings me to my next point...

The biggest flaw I've seen is the lack of *support*. I'm not just
talking about over-the-phone support, I'm also talking about things
like:

 - Practical-use documentation (shout out to Digital Ocean)
 - 1st party community forums with offical answers to common questions
   (as much as I hate to admit it, shout out to Microsoft)
 - Transparent and easy-to-follow bug tracking (shout out to JetBrains)

The above shout outs are examples of companies that do those things
the way they should. But if we look at the largest database company on
the planet, Oracle, they are an example of what NOT to do when it
comes to support.

** Features of OidaDB

In regards to those features I was mentioning earlier, lets dive into
those.

*** SWAFUR

"SWAFUR" is the unique DNA of OidaDB, it is an expansion - or
mutation, depending on how you look at it - of the "CRUD"
philosophy. Where as CRUD stands for Create/Read/Update/Delete, SWAFUR
conjugates to Select/Write/Allocate/Free/Update/Read (the order is a
bit off in the effort to make a pronouncable acronym).

The pleasantness here is to have very specific, comprehendisve, and
detailed control over what the database is doing. Breaking up the 4
operations into the 6 gives us 50% more tools to use when it comes to
optimizing how our software works with the database.

*** Quick Structures

Quick structures is the sentiment that the structure of the data can
change just as often as the data itself. Software that uses OidaDB is
encouraged to approach database designs as flexible rather than fixed.

It feels like with normal relation database, the =ALTER TABLE= command
has thus far been reserved for database administrators. OidaDB
incentivizes that the software becomes the database administrator. The
ability to add, remove, or modify the structure of the data itself
should be given to the user who knows what they need, not just the DB
admin.

*** The Event Stream

Connecting to OidaDB provides not just access to existing data as all
other database do, but also a feed of new data authored by other
connections to the database. This brings OidaDB closer to a operating
system than a traditional storage scheme.

The idea is you should never have to "refresh" for updates. The data
should be as up to date as it can be: down to the milisecond. And this
feature should not be a baren on the developer, they need only to
specify where to find the data, and the database in tern will provide
a stream to the updates to the data (not just the data itself).

The usefulness of The Event Stream is limitless. Lets say if you were
making a system for a manufacturing plant. 

#+BEGIN_EXAMPLE

Lets say you have /HR Mangr/ monitoring employees clocking in and out,
then /Hardware-sys/ monitoring equipment storage, and then finally
/myConvey/ controlling conveyor belts. All of them using OidaDB to
store their information.

By only needing to repogram /myConvey/ (and not even touching /HR
Mangr/ nor /Hardware-sys/), you can program the convey belts to turn
on the instant when someone clocks into the shop floor and turn off
the instant a certain equipment fills up with product.

Then later down the road, you make a different app, /notify.me/. You
can connect to the same database, and, without touching those other
systems, send a notification to the floor manager everytime the convey
belt turns off.

So just like that you have 4 distinct softwares that are completely
uncoupled yet all play important roles in a comprehendsive system
without even realizing it.

#+END_EXAMPLE

*** Parallel Proccessing

OidaDB breaks apart jobs and executes its pieces concurrently. As jobs
become larger, their efficiency will scale as they can be broken up
into smaller pieces.

This once again something thats implicit. The developer should never
have to worry about how to fully utilize the hardware on the host
machine. The database should just do it automatically. OidaDB needs
only to be given the limits of hardware it can use, and OidaDB will do
its best to utilize 100% of that hardware, /efficiently/. Thus, you
can throw 500 computers with a total of 32,000 CPU cores and 128
terabytes of ram at OidaDB, and OidaDB will thrive without even being
configured.

*** The Federated Network

OidaDB is designed to be ran across multiple datacenters; such as a
franchise operates out of multiple locations, they can be both equal
and distinct in nature. This is a very important key in larger,
enterprise-level or fast-growing applications.

When it comes to hosting larger databases, its typically a team
effort - sometimes with some consultants involved - to try have that
database utilize multiple computers. OidaDB has this built-in. Of
course you can spin up a single OidaDB instance on a single machine
and do everything with that machine, but when it comes to growing your
database: all you need is to install OidaDB on a second machine,
provide it with the IP of the first machine (along with some security
key stuff), and boom; both machines are now automatically load
balancing with either of their IPs acting interchangable to incoming
clients.

Such a network is also implicitly responsive to location-based
optimizations. For example, if we had 2 datacenters, one in the US and
another in the EU, data more commonly used in either region will be
cached in its respective region (note, without being locked therein).

* Installation

To begin our journey the first step is to get your software talking to
OidaDB's. OidaDB was written in C, meaning it works with just about
any language. The full list of supported languages will be discussed
later.

OidaDB is mainly supported on any Debian/GNU system that uses =.deb=
packages. Although, a tar file is provided for any other 64-bit linux
system: provided you know what you're doing in terms of how to install
it.

 - See all downloads [[https://oidag.com/oidadb/releases/][here]].

Below I'll provide some easy "is it on?" check code for the various
supported languages. (See also: [[./common-lang.org][Language bindings & Symbols]])

** Installation test: C

We can take the following code saved in =main.c=:


#+BEGIN_SRC c
// main.c
int main()
{
    printf("%s\n", odb_version());
}
#+END_SRC

And compile it with =gcc main.c -loidadb -o oidadbtest=. And without
errors you should then run =./oidadbtest=. If you see OidaDB's version
printed out you're ready to begin.

** Installation test: Golang

Golang bindings should automtically be pre-installed with the standard
distribution. They can NOT be aquired using =go get=, the import URLs
are virtual. Its up to you to figure what you need in terms of the
=go.mod=, but in terms of a simple starting point:

#+BEGIN_SRC go
import "golang.oidadb.com/oidadb"

func main() {
    println(oidadb.version());
}
#+END_SRC

Build and run using =go run main.go=.

** Installation test: Python

Python bindings should automatically be pre-installed with the
standard distribution.

#+BEGIN_SRC python
import oidadb

print(oidadb.version());
#+END_SRC

** Installation test: Typescript

Regarding your package.json, make sure you have ="oidadb": "1.x.x"= is
in your dependencies. It is recommened you never specifiy any version
number past the major version (See also: [[./versioning.org][Versioning]]).

And for a simple =index.ts=

#+BEGIN_SRC typescript
// index.ts
import * from "oidadb";

console.log(oidadb.version());
#+END_SRC

** Installation test: Kotlin

Kotlin bindings are included in your system automatically.

#+BEGIN_SRC kotlin
package oidadbtest

fun main() {
    println(oidadb.version());
}
#+END_SRC

* Manual Index

 1. [[./preface.org][Preface]]
 2. [[./versioning.org][Versioning]] - Specificaion on how versioning works.
 3. [[./hardware.org][Hardware]] - Information regarding OidaDB and its use of hardware.
 4. [[./common-lang.org][Language bindings & Symbols]] - Naming conventions, standards,
    paradigms, ect. Really helpful to allow you to code faster.
 5. [[./errors.org][Errors]] - 50% of your job is handling errors; the other 50% is
    making them. Here we discuss the importance of errors and OidaDB
    paradigm thereof.
    1. [[./odb_errstr.org][=odb_errstr=]]
 6. [[./database.org][Database Creation/Deletion]] - All the info about creating and
    deleting databases. Also information on how the options to
    confiugre OidaDB databases.
    1. [[./odb_open.org][=odb_open=]]
 7. [[./buffers.org][Buffers]]
    1. [[./odb_buffer_new.org][~odb_buffer_new~]]
	2. [[./odbb_bind_buffer.org][~odbb_bind_buffer~]]
	3. [[./odbv_buffer_map.org][~odbv_buffer_map~]]
	4. [[./odbv_buffer_versions.org][~odbv_buffer_versions~]]
 8. [[./blocks.org][Blocks]] - The fundemental building blocks of every OidaDB
    database.
	1. [[./odbb_seek.org][~odbb_seek~]]
	2. [[./odbb_checkout.org][~odbb_checkout~]]
	3. [[./odbb_commit.org][~odbb_commit~]]

