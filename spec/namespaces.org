
* Intro
I've reached a critical point where I no longer have any idea who
wrote what code despite the fact that I'm the only contributer to this
entire codebase. This is a magical thing that can happen.

Anyways, as I've philosphised, when it comes to seperating code,
there's an infinate amount of ways to do it correctly. Only that it
remains consistant. So herein I shall write the rules of when code
should be seperated.

* Code-in-file (general)
* Namespaces
All namespaces (following the simple schematic of =edb_=) will largely
"make themselves nessacary". Don't try to plan ahead.

For now, lets pretend that namespaces and componenets are the
same. This may change.

** Subnamespaces
Sometimes code gets out of hand for a single namespace but is too true
to the namespace to result in a fissure. So we make a
subnamespace. Subnamespaces are not visible to their super
counterparts but supers are visable to their subs.

Subs are an /extension/ of their supers.

* edb.h (master interface)
The only file that will be visible after compilation. All namespaces
are expected to have visibility to this file.

* edba.h
All (a)tions that can be done on the file following spec sheets for
both edb, and locking.

 - edbl (for installing/managing locks as per spec)
 - edbd (for entry and structure reading/writting (note to self: probably consolidate this into edbp))
 - edbp (for reading/writting pages)

* edbd.h
The fundemental file (d)escriptor of edb files. This mainly deals with
all meta and static pages (pages that are not put into edbp
caches). This includes all entry IDs 4 and lower.

The edbd namespace is also the only namespace that can create and
delete raw pages.

* edbx.h
Everything needed to e(x)ecute hosting, this will simply allocate everything
and prepare workers to start exceptiong jobs via hosts.

 - edbd (opening and reading file)
 - edbs (for booting up shared memory space)
 - edbp (for configuring and initializing page buffer, to pass to edba)
 - edba (for initializing edba space and pass to workers)
 - edbw (for booting up workers)

* edbh.h
The (h)andle for client connections.

 - edbs (for connecting to host and communicating jobs)

* edbs.h
This is everyting used to manage the (s)hared memory data that is used
to relay information between the host and handles.

 - edbd (for basic file information to show the user)

** edbs-jobs.h
Everything specifically managing jobs
installs/selects/statuses/transfering buffering inside the shared
space.

* edbl.h
This is a smaller namespace but deals only with (l)ocking
functions. This is used extensively for traffic control for edb's
insane async enviroment. See locking.org.

 - edbd - special relationship - edbl has access to symbols needed for
   fcntl(2) abilities. However, the fcntl(2) backend is not a
   hard-spec, so these symbols (found exclusively in edbd-edbl.c) can
   and will be removed as edbl advances. Thus, don't use these symbols
   outside of edbl.

* edbp.h
(P)age management for the file.

 - edbd (for access to the file)

** TODO edbp-types.h
This is just a bunch of structures that further describe page headers
and what not in accordance with spec. No functional signifigance.

* edbw.h
Everything regarding (w)orkers.

 - edba (to execute jobs)
 - edbd (for reading basic structure information for some jobs)

* odbm/gman/
This domain is what we will call "object orientated
programming". Every Object is either a static or non-static
object. static objects are initialized via =*_start=
functions. Non-static functions are initialized via =*_new= functions
and these new functions will return a pointer to the newly created
object. They will de-allocate themselves when they find out they're
not needed anymore on their own.

=gman.h= is aware of everything in this domain. It can
create/initialize things as it needs and these objects are never
exposed to the outside domain. No other header file is to be included
outside of this domain and its subdomains.

** Objects

 - shard*
   - shard-descriptor
   - shard-page
   - shard-worker
   - shard-job
   - shard-event
 - column
 - /background/
 - dialog*
   - /dialog-structure/
   - /dialog-index/
   - /dialog-meta/
   - /dialog-worker/
   - /dialog-job/
   - /dialog-event/
   - /dialog-page*/
     - /dialog-page-any/
     - /dialog-page-object/
     - /dialog-page-dynamic/
     - /dialog-page-lookup/
     - /dialog-page-deleted/
 - /terminal/

Italicised indicates static object.

Asterisk (*) indicates abstract class (=gman.h= cannot create/interact with it
directly, must be done via a subclass).

* odbm/main.c
Can include:

 - Any standard utils for process politics (--help/exit codes, ect)
 - odbm.h (for actually running the app)

* odbm/odbm.h
Can include:

 - gman/gman.h (for putting shit on the screen)
 - oidadb.h (for reading and parsing files/processes)
 - telemetry.h (listening to host)

* odbm/gman/glplotter.h
Only thing that can import glfw functions. Handles all the logic for
drawing/not drawing specific graphics on the basis of invalidation.

 - glfw.h

* odbm/gman/gman.h
Built on top of glplotter.h and uses openGL to draw everything.

This is the "entry point" for drawing everything, and deals with high
level organization and exposes functions to odbm.h.

"object oriented" C code within. So it has some weird rules.

 - ../glplotter.h (for full use.)
 - oidadb.h for structures/helpers to be passed in from odbm.h. But cannot
   call any non-helper function.
 - any header within the same domain.

* Utility Namespaces
All utility namespaces are things that do not start with =edb_=, these
namespaces give symbols that require no handles and are all
processor-wide.
** =odbm/primatives.h=
math helpers.
** =errors.h=
For REPORTING errors into a specified output stream. Used for
dianostics.

** =analytics.h=
Functions for reporting common statistics for the database for the use
of administration to have the innerworking availabe

** =options.h=
Here are macros for building stuff. Each macro should be documented.

