#+SETUPFILE: ./0orgsetup.org
#+TITLE: odbh_jobtype_t: Job types and their protocols

* Job Streams
Here I shall define for you job streams. Job streams is the common way
to which handles communicates to hosts. We use streams because we can
put a stream through anything: shared memory, networks, charater
devices, fiber optic drivers, ect.

Job input and output are put through job streams. All job streams are
a 2-way communication. The end goal of the job stream is to write the
job into the job transfer buffer of the host's machine.

There's a few engineering desicions we employ here:

 1. Sense we know these streams are likely going to be sent through a
    network, we want to try to use as few "back and forths" as
    possible sense packets can take time to transfer over the
    network. This is despite the fact that some input will be
    ignored/redundant if the host chooses not to require it from other
    input: such as if an error occours part-way through a job and thus
    no more input needs to be read.
 2. The /minimum/ size for a udp packet is 8 bytes. Thus, if we try to
    send packets smaller than that, we're wasting good
    infrastructure. The maximum size is 64KiB... so any larger will
    result in the same inefficiency. So its best to not worry /too/ much
    about size-efficiency.
 3. The handle can choose to reduce the stream to a 1-way / write-only
    stream. So have that in mind. The default 2-way communication is
    only a convience for the handle but not nessacary for the host.

* Notation
 - /abc+xyz/ - structure abc imedietly followed by xyz without padding

* Common Protocol
** Die-Error
Almost everytime a =odb_err= datatype is read from the stream, it will
signal if you can continue to execute the remainder of the protocol or
not. We call this behaviour a *Die-Error* (or die-on-error). If a
Die-Error is 0, this means no error was generated and you can continue
with the protocol. Otherwise, the host would have closed the stream
and the Job has made no change due to the returned error and thus you
must call =odbj_close=.

To reitorate, if you perform an =odbj_read= on a stream and the
protocol documents that you'll be reading a =odb_err=-structured
"Die-Error", you must not attempt to perform another =odbj_read= on
that stream if this Die-Error is non-0 but instead call =odbj_close=
** usrobj
The *usrobj* is not a datatype. But instead, symbolizes the structure
the user had defined for the object.

** stream-pointer
Sometimes when data should be presented to you for both reading and
writing, its better design to instead give you an address to said data
to which you can read and manipulate on your own terms. A pointer used
in this manner is what we'll call a [[stream-pointer]].

The defined validity of stream-pointers are only between the
=odbj_read= / =odbj_write= call that retrieved/sent the pointer and
the subsequent call to =odbj_read= / =odbj_write= / =odbj_close= in
reference to that job.

For example, if you read a stream-pointer from an =odbj_read= call,
you must only access that pointer before you call any other =odbj_=
function. After which, if you attempt to access that same point it may
result in a segfault.

/Note/ that depending on the enviorment, the pointer may be
referencing data thats being temporarly held in the handle, or, may
even be referencing data strait out of the database file... whichever
the handle find more appropriate.

* =ODB_JALLOC= - Create a object
This will create a new object for a given entity. If OidaDB can, it
will reuse something that has previously been deleted. Thus, the
returned oid may be one that has been returned before.

** Protocol

| Direction  | Name       | Datatype        | Notes                                                                    |
|------------+------------+-----------------+--------------------------------------------------------------------------|
| odbj_write | eid+object | odb_eid+usrobj  | The entity id to create a new object and said new object                 |
| odbj_read  | err+oid    | odb_err+odb_oid | [[Die-Error]]: See Errors, and if thats 0, The OID of the newly created item |

** Errors

 - =ODB_ENOENT= - Entity not valid.
 - =ODB_ENOSPACE= - No more space could be allocated for this entity.

* =ODB_JFREE= - Delete an object

Not much to talk about here. This will delete a given object.

*** Protocol

| Direction  | Name | Datatype | Notes                                     |
|------------+------+----------+-------------------------------------------|
| odbj_write | oid  | odb_oid  | The object id you wish to delete/undelete |
| odbj_read  | err  | odb_err  | [[Die-Error]]: See Errors                     |

*** Errors

 - =ODB_ENOENT= - Entity not valid
 - =ODB_EDELETED= - oid was found and valid, but has already been
   deleted, so no action was performed. This error can be ignored in
   most cases for obvious reasons.
   
* =ODB_JWRITE=, =ODB_JREAD= - Read/Write an object's fixed-length data based off of its oid

This is the basic read/write options by-oid. In most
heavily-engineered enviroments, these jobs probably won't be the most
optimial choice sense they only provide methods of updating 1 object
at a time. But nonetheless, they're very easy to use.

** Protocol

For *READING*:

| Direction  | Name       | Datatype       | Notes                                       |
|------------+------------+----------------+---------------------------------------------|
| odbj_write | oid        | odb_oid        | The object id you wish to read              |
| odbj_read  | err+usrobj | odb_err+usrobj | [[Die-Error]]: See Errors, and if 0, the usrobj |
|            |            |                |                                             |

For *WRITING*:

| Direction  | Name       | Datatype       | Notes                          |
|------------+------------+----------------+--------------------------------|
| odbj_write | oid+usrobj | odb_oid+usrobj | The object id you wish to read |
| odbj_read  | err        | odb_err        | [[Die-Error]]: See Errors          |


** Errors

 - =ODB_ENOENT= - OID not valid
 - =ODB_EDELETED= - Object is marked as deleted

* =ODB_JSELECT=, =ODB_JUPDATE= - reading/writing of all objects in an entity

When you need to read the an entire Object Entity's contents,
=ODB_CSELECT= stream all objects in a given page range through to
you. =ODB_CUPDATE= does the same but you will then also have to write
back each row in its entirety.

The reason this protocol begins with you specifying which pages to
span is to allow you to take advantage of multi-threading. For
example, if you needed to update an entire Entity that is 500 pages
long while the host had 5 workers, then you can start 5 jobs with each
having its exclusive 100 pages to update.

** Protocol

The protocol is as follows in both =ODB_CSELECT= and =ODB_CUPDATE=:

| Direction  | Name       | Datatype | Notes                                            |
|------------+------------+----------+--------------------------------------------------|
| odbj_write | eid        | odb_eid  | The entry id to which we will perform the select |
| odbj_write | page_start | odb_pid  | The starting page offset (0 for entity start)    |
| odbj_write | page_cap   | odb_pid  | The maximum amount of pages to select (-1 for all pages) |
| odbj_read  | err        | odb_err  | [[Die-Error]]: See Errors                            |

In the case of =ODB_JSELECT=, the following will reapeat (until =objc= is 0)

| Direction | Name   | Datatype | Notes                                                                           |
|-----------+--------+----------+---------------------------------------------------------------------------------|
| odbj_read | objc   | uint64_t | The number of objects that will follow. This will be 0 if there's no more left. |
| odbj_read | object | [[usrobj]]   | user defined object structure of =eid=                                          |

If the job is a =ODB_JUPDATE=, the the above section is dispatched,
but before the handle can get the next set of objects, it must respond
with its changes:

| Direction  | Name   | Datatype | Notes                                                              |
|------------+--------+----------+--------------------------------------------------------------------|
| odbj_write | object | [[usrobj]]   | This is an array that is the same size as =odbjc= in the read part |

** Errors

 - =ODB_ENOENT= - Entity (eid) not valid

** Remarks

In most enviroments, these commands are increadibly efficient compared
to the technical competition. Most databases use record-level locking
when performing their respective update operations. Installing such
volume of locks is /extreamly/ costly. Other databases (ie MyISAM)
installs table-level locking, thus needing only needing to install 1
lock it is faster though really falls apart in a multithreaded
enviroment. These operations use /page-level/ locking, and, stream out
the entire pages to the handles to process (instead of streaming
row-by-row). The design of this causes absurd efficieny between the
CPU, memory, and network.

* =ODB_JSTKCREATE= - Create an structure

Create a new structure

** Protocol

| Direction   | Name      | Datatype                    | Notes                                                                              |
|-------------+-----------+-----------------------------+------------------------------------------------------------------------------------|
| odbh_jwrite | odbstruct | [[./odbh_structs.org][odb_structstat]]              | Structure details to be created. The confv field can be disregarded, see next row. |
| odbh_jwrite | confv     | configuration for structure | The configureation, the length will be equal to confc of the structstat            |
| odbh_jread  | error+sid | odb_err+odb_sid             | See Errors,The newly created structure id                                          |

** Errors

 - =ODB_ENOSPACE= - No more space could be allocated for this entity.

* =ODB_JSTKDELETE= - Delete an structure

Delete an existing structure

** Protocol

| Direction   | Name  | Datatype | Notes                            |
|-------------+-------+----------+----------------------------------|
| odbh_jwrite | sid   | odb_sid  | The structure you wish to delete |
| odbh_jread  | error | odb_err  | See Errors                       |

** Errors

 - =ODB_EEXIST= - structure currently in use.
 - =ODB_NOENT= - sid is not valid
 - =ODB_EDELETED= - already deleted.

* =ODB_JENTCREATE= - Create an entity

Create a new entity

** Protocol

| Direction   | Name      | Datatype        | Notes                            |
|-------------+-----------+-----------------+----------------------------------|
| odbh_jwrite | odbstruct | [[See Also][odb_entity_t]]    |                                  |
| odbh_jread  | error+eid | odb_err+odb_eid | See Errors, the newly created id |

** Errors

 - =ODB_ENOENT= - =entstat.sid= is not a valid structure id

* =ODB_JENTDELETE= - Delete an entity

Delete an existing entity

** Protocol

| Direction   | Name  | Datatype | Notes                         |
|-------------+-------+----------+-------------------------------|
| odbh_jwrite | eid   | odb_eid  | The entiiy you wish to delete |
| odbh_jread  | error | odb_err  | See Errors                    |

** Errors

 - =ODB_ENOENT= - =eid= is not a valid entity id
 - =ODB_EDELETED= - =eid= is already deleted.

* Dynamics
* See Also
 - [[./odbh.org][OidaDB Handles]]
 - [[./odb_elm_jobs.org][Jobs]] - A high-level overview of OdbaDB jobs and their life
   cycle. As well as discussion and advise for increasing performance.
 - [[./odbh_job.org][=odbh_job=]] - Functions to install jobs and to read, write, and
   close the transfer buffer.
 - [[./odb_elm_structs.org][odb_struct_t]]
