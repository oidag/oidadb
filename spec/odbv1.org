#+SETUPFILE: ~/.emacs.d/themes/stylish_white.theme
#+TITLE: OidaDB Specification
#+AUTHOR: Kevin Marschke

Let us manage a list of all page versions in the database header. So
the header offset of 123 will be the version of page offset 123.

* Core library
The core part of oidadb is its pages interface. This interface is
inherited into more specific things such as the index, lookups,
fixeddat, dyndat, ect. But All of these things all use the pages
interface to perform their operations and expose interfaces simular to
that.

v1 will be JUST pages.


Inheritance tree (for how data is structured, i think):

Pages <- Entities <- Fixed Data    <- btrees
                                   <- structure data
                  <- Dynamic Data  <- ?also structured data?
      <- ?Blobs

** Thoughts on permissions

Further down the line, I can add permissions to the overall
interface. That is, every time checkout is called, it creates a
"namespace" so child checkouts will have to follow the rules of that
namespace. (think capabilities).


how about the idea of *rejecting* merges by the parent. this will
provide also the ability to accept them and call hooks.

* Descriptor Engineering
For an open descriptor of the database, we want to make sure we use
the idea of commits, merges, ect.

 - Open a file descriptor.
 - Performing any operations without checking out is editing data
   strait on the file. This may be useful to you, it may not be. But
   it is allowed.
 - Checkout - When you checkout, its like you freeze the database from
   being edited by anything else. You won't see other's changes during
   this time (unless their your own).
 - Use - when you specify that you want to "use" a page, this means
   that you are declaring the uses you need for a particular page. You
   must specify the use of a page before you can modify/see its
   contents. All calls to "use" add it to the checkout stack and are
   all closed when a commit is successfully executed. You can also
   specify a use to be a "full exclusive" - this will stop others from
   accessing that page but also guanetee that no conflict can happen
 - Commit - if the commit fails, a list of conflicts is shown by means
   of a list of pages that have conflicts. Commit will not work until
   these conflicts are marked as resolved. You can compare conflicts
   between your pages (via odbh_page) and the upstream pages (that
   conflict will return, but these upstream pages are readonly).
 - Rollback - forget about all changes.


You can call "checkout" multiple times to have recursive checkout frames.

Once again, you can operate outside the checkout. 

** Thoughts on networking

With the "use" and checkout stuff. we can change the checkout/commit
and stuff to operate through a socket instead of shared memory

* ODB File
** Layout/Definitions
Inside of a OidaDB file (which can also be a block device) or
"volume", as we call it, is broken up is into "pages". Pages are
exactly 8192 bytes in length.

An OidaDB's pages are then spit up into *Groups*. A Group is
classified as 1024 subsequent pages. With the first 1024 pages
belonging to Group 0, the next 1024 pages belonging to Group 1, and so
forth.

Inside each group, the first 2 pages are known as *Meta Pages*, the
remaining 1022 pages are known as *Blocks* (aka User Pages).

The first Meta Page in each group, known as the *Descriptor Page* is
actully split up into 2 sections, each eactly 4096 bytes in
length. The first section is the *Super Descriptor*, the second
section is known as the *Group Descriptor*.

The second Meta Page in each group is known as the *Version
Index*. The Version Index is then split up into 8 byte unsigned
integers known as *Versions* (1024 in total) that map to each page in
the Group to represent its version. With the first two Version mapped
to the Meta Pages and the remaining 1022 Versions mapped to the
Blocks.

** Purity
ODB files are by definition pure outputs, that is if the same
operations are performed on 2 newly created ODB files, both of those
files will be exactly the same. This principle means that no where in
a raw ODB file (not including user data) do we store time stamps,
UUIDs, seedless randoms, ect.

Purity does not include the unpreditable properties of
multi-processing: if multiple processes perform the same operations on
two seperate files, there's no guarentee withing the ODB specification
that the order to which the processes' operations will be
predictable. But again, if we're talking about just 1 thread and 1
process, performing the same series of operations on 2 newly created
ODB files, then those two files will be identical.
* Descriptor Page
As discussed in layout, the descriptor page has a super and group
descriptor in a single 8KiB page. The Super Descriptor is required to
be on the first Descriptor page of the volume. All other Descriptor
pages can optionally have the Super Descriptor as backups, but the
primary source of truth is the first super descriptor.
** Super Descriptor

| Name  | Type       | Description                                   |
|-------+------------+-----------------------------------------------|
| magic | uint8_t[2] | ODB Magic number, will always be {0xA6, 0xF0} |

** Group Descriptor

* Concurrency Control
A single ODB file is assumed to be operated by an unlimited amount of
processes at a given time. And each one of those processes can have
their own threads, so there's a lot to consider here. So lets start at
the beginning.

** Creating/Opening an ODB file
When creating a fresh ODB file, you're obliaged to write the first
set of Meta Pages before the file can be opened up by subsequent
processes. To prevent the condition to which multiple processes are
attempting to create the same file, we always create odb files using
the =O_EXCL= flag with =open(2)=.

Once we have created a odb file, we still need to ward off other
processes from trying to load our file until the first Meta Pages
is complete. So, once we've created an odb file, we immediately place
a =F_WRLCK= advisory lock using =fcntl(2)= on the first 2 bytes of the
file (soon to be the magic number), we set up the first Descriptor
Page and then only after we release the =F_WRLCK=. Conversely, when
opening an odb file, we first place a =F_RDLCK= on said file's first 2
bytes, read the magic number and make sure its valid, then relase the
lock. This will ensure the file will always be properly initialized
when opening a newly created odb file.

Concurrently creating an ODB file from multiple different threads of
the same process results in undefined behaviour.
