* Introduction

The most important things bout the edbl.h namespace is the content of
this document you're reading now. It is imporant you read this
document and undestand it before you start fucking with the edbl
functions in anyway.

It is VITAL that you lock the right things in the right order. Not
locking things in the right order WILL result in deadlocks and
shitty headaches.

So, to get the proper order of which to lock things require to know
what job you're trying to do. The first variable to this is the
element type:

 - Entry
 - Structure
 - Objects

Next, what cateogyr of operations are you trying to perform?

 - Create
 - Read
 - Update
 - Delete
 - (defragging will be discussed below)

* Lock Types
** LFILE
When it comes to odb_host, it must be sure not to try to host a file
that is already hosted. We must prevent other threads and other
processes from trying to open the file.

This lock should be aquired before any thing happens. All locks listed
herein will implicitly be under this lock.
** LENTRY
(aka clutch lock). This lock dictates general activity in the chapter,
but it does not designate if this activity is read/write only. Only
that there is currently work being performed. This should almost
alwasy be an SH lock. The only purpose of XL locks here are for pmaint
jobs, or any job that has an 'unpredictable' approach to pages in the
chapter.

** LENTTRASH
An XL lock on this entry means a job has a likely hood that it will be
changing the =trashlast= field in the structure.This lock is also
needed to read any page's =trashvor=.

 - Directly under LENTRY(sh)

** LREF0C
Nothing shall add/reference any object (or nessacary lookup) pages
without having an LREF0C. Incrementing ref0c should be the last step
in all processes, only after that has been incremeneted can you
release this lock.

You must have a LREF0C before you follow =deepright=. This will prevent
two workers from both trying to update deepright in the chance of a
lookup fault.

You must wait to unlock =ref0c= until only after deepright and ref0c
has been fully updated.

Lock this if your job will be increasing the amount of object and/or
lookup pages.

 - Directly under LENTRY(sh) or directly under LENTTRASH.

** LLOOKUP_EXISTING
This shared lock on a lookup page showing that your job is accessing
this lookup page trying to find a reference that you know already
exists (and thus can coexist with LLOOKUP_NEW)

 - Under LENTRY(sh)

** LLOOKUP_NEW
This lock means you are installing new references on this lookup page.

 - Under LENTRY(sh)

** LROW
Putting a SH or XL lock on an object allows you to read/write to that
object respectively.

 - Under LENTRY(sh)

** LTRASHOFF
Lock this on an object page with the intention of changing the trash
offset, such as adding or removing trash.

 - Under LENTRY(sh)
 - If removing trash: cannot be under LROW(xl)
 - If adding to trash: must be under LROW(xl)

** LENTCREAT
Place an [[LREF0C]](xl) lock on the index chapter entry.
** LSTRUCTCREAT
Place an [[LREF0C]](xl) lock on the structure chapter entry.
** Arbitrary Locks
The need for additional locks in future versions is
unpredictable. They shall come as they are needed, and thus their
specification will come as its needed.

Anytime a new type of lock is needed, use the function of an
=arbitrary_lock= which will allow you to lock any bytes you may
need. Use this function as only a temporary measure until the
confidence for a new type of lock is realized.

* fcntl SETLKW backend
When developing how locks should work in the backend, =fcntl= advisory
locks are the most intuitive. Though you should use mutexes where you
can. In this section we'll define each lock in terms of byte regions
set by =fcntl=.

I'll do these in short hand, but here's the key:

 - =+XL=, =+SH= Add a =F_WRLCK= or =F_RDLCK= to the region respectively.
 - =-XL=, =-SH= Remove the existing =F_WRLCK= or =F_RDLCK= from the
   region respectively.
 - =+XL/SH=, =-XL/SH= remove the =F_WRLCK= or =F_RDLCK= depending on
   the desired variation of the lock (if applicabl)

Any locks that were left 'dangling' are the locks that should be
removed to release the locks. You must release such locks in reverse
order that they were applied (first in last out) unless specified
otherwise.
** fcntl-LFILE
 1. +XL on first byte of file
** fcntl-LENTRY
For entrys we do something cheeky that is "clutch locks" to optimize
for the fact that these locks are going to be put on and off A LOT.

For XL locks, we use the first byte to activate the 'clutch' to which
all new locks will have to wait before they can be apply
themselves. While the 'clutch' is active any existing locks can finish
their work.

If we didn't do this, then SH locks will contiously apply themselves
ahead of the pending XL locks. And thus XL locks will never have the
ability to engage.


 1. +XL/SH first byte of the entry
 2. +XL/SH the second byte.
 3. -XL/SH from the first byte
** fcntl-LENTTRASH
 1. +XL/SH on first byte of the =trashlast= field of the entry.
** fcntl-LREF0C
 1. +XL on first byte of the =ref0c= field of the entry.
** fcntl-LLOOKUP_EXISTING
 1. +SH on the first byte of the lookup page
** fcntl-LLOOKUP_NEW
 1. +XL on the second byte of the lookup page
** fcntl-LROW
 1. +XL/SH first byte of the object row's bytes
** fcntl-LTRASHOFF
 1. +XL on first  bytes in the object page's =trashstart_off= field
** fcntl-LENTCREAT
See [[fcntl-LREF0C]] but with the index entry.
** fcntl-LSTRUCTCREAT
See [[fcntl-LREF0C]] but with the structure entry.



** shm
 - shm_open should be done for connecting to a process via the file
   name schema of /EDB_HOST-{PID} where {PID} is the host process ID.
 - For read-access only, you're welcome to connect to this shm block
   and read whatever you want. But mind you the futuxes and mutexes in
   shm are configured to be inner-process... does this require write
   access to read these?... I have no idea.

* Note on Page deletion
Sometimes pages are created for an operaiton but that operation ends
up failing for other reasons. In these cases, the operation tries its
best to delete those pages before that operation cleans up lock it
posseses.

Thus, marking pages as deleted in any sort of way must be a completely
independant locking mechanism. Avoid this, look closely and you'll see
a deadlock:

 Op1 (ok): Locks ABC -> creates pages -> operation fails -> Locks Deletion -> Deletes -> unlocks deletion -> unlocks ABC
 Op2 (bad): Locks Deletion -> Locks ABC -> does stuff -> Unlocks ABC -> Unlocks Deletion
* Entry
** Entry-Creating
  1. Aquire [[LENTCREAT]]
  2. Surf the index for an ODB_ELMINIT /or/ ODB_ELMDEL (which ever
     comes first) entry.
  3. Aquire an [[LENTRY]](xl) for that entry.
  4. Set the type to ODB_ELMPEND to deter other creation attemps.
  5. Release [[LENTCREAT]].
  6. Make whatever edits are needed to the entry and chapter.
  7. Set the type to whatever it needs to be. This is the final
     marker to indicate a non-corrupted entry. if there's a crash
  8. Release LENTRY.
** Entry-Deleting
  1. Aquire [[LENTRY]](xl) on the entry you wish to delete.
  2. Set the chapter type to ODB_ELMPEND just incase of crash we can
     sniff out corruptions.
  3. Make whatever edits are needed to the entry and chapter.
  4. Aquire [[LENTCREAT]].
  5. Set the type to ODB_ELMDEL
  7. Release [[LENTRY]]
  8. Release [[LENTCREAT]]
** Entry-Updating
Note: for structures, you must lock the structure creation mutex first
to prevent the sturcture (your updating to) from being deleted.
** Entry-Reading
[[LENTRY]](sh).
* Structure
** Structure-Creation
Simply have a [[LSTRUCTCREAT]](xl).

** Structure-Deleting
First, aquire a [[LSTRUCTCREAT]](xl).

Then you must get a [[LENTCREAT]](xl) so nothing can be created with the
structure you're trying to delete.

You must go through all indexes from top to bottom, placing [[LENTRY]](sh)
locks on all of them, then make sure it doesn't posses that
structure. If it does, then that's an error, you cannot delete the
structure, roll back the locks and quit.

* Object
** Object-Reading

Get a [[LENTRY]](sh) for the entry.

Then perform the b-tree lookup using valid [[LLOOKUP_EXISTING]](sh)
lookups. Apply these locks before you load each lookup page. And once
you get the next reference, place the [[LLOOKUP_EXISTING]](sh) on the next
lookup page, then you can safely remove and deload the parent
lookup (Weave Lock).

On the final lookup, with the leaf node page id aquired, place a
[[LROW]](sh) on the row you need and load that page.

You should end up with only a LROW(sh) and LENTRY(sh) to unlock.

** Object-Updating
First, [[LENTRY]](sh), of course.

Then perform the b-tree lookup using valid [[LLOOKUP_EXISTING]](sh)
lookups. Apply these locks before you load each lookup page. And once
you get the next reference, place the [[LLOOKUP_EXISTING]](sh) on the next
lookup page, then you can safely remove and deload the parent
lookup (Weave Lock).

On the final lookup, with the leaf node page id aquired, place a
[[LROW]](xl) on the row you need and load that page.

You should end up with only a LROW(xl) and LENTRY(sh) to unlock when
you're finished editing.

** Object-Creating
*** Static ID Creation (aka Object-Undelete)
Follow the exact same process as [[Object-Deleting]] except instead of
adding the object from the trash linked list: remove it.
*** Auto ID Creation
 1. Aquire [[LENTRY]](sh)
 2. Aquire [[LENTTRASH]](xl).
     - This will prevent 2 workers trying to handle 2 seperate
       trashfaults at the same time, which can inadvertantnly remove
       pages out of the trash cycle.
 3. If the =trashlast= is 0. Then this means more pages are needed to
    be created. goto steps [[Object-Creating-Lookup]].
 4. With the trashlast page id, before you load that page, you must
    aquire a [[LTRASHOFF]](xl) on that object page.
	 - This will prevent 1 worker from trying tup read trashstart_off
       while another tries to update it at the same time. See
       [[Object-Deletion]].
 5. With the trashlast page loaded, handle all trash faults by:
     1. Updating =trashlast= with the loaded page's =trashvor=.
     2. Unloading the page. Releasing its [[LTRASHOFF]].
     3. Repeat step 4-5 until there's no more trash faults or,
        trashlast ends up being 0. In the latter case, go to step 3.
  6. Release [[LENTTRASH]].

  7. Aquire [[LROW]](xl) on the trashed record you wish to modify, then update
     =trashstart_off= with the next step in the linked list.
  5. Release [[LTRASHOFF]].
  6. Do the creating of the record and what not. (If a user flag
     prevents its creation, simply skip this step. Note how what we've
     just done is taken out this record from the trash yet not
     successfully un-trash it. This is actually fine, sense trash
     records must be able to be untrashed that would me this record is
     unfit to be trash. The user would have to manually create this
     with proper flags.)
  7. Release [[LROW]].
  8. Release [[LENTRY]].

*** Object-Creating-Lookup
Note the only time you should be here is from [[Auto ID Creation]]. Thus,
their should be an [[LENTRY]](sh) and [[LENTTRASH]](xl). However, =trashlast=
is 0 which means we need more pages. Let's continue on:

 1. Aquire [[LREF0C]](xl).
   - This will prevent any other job from creating any new pages what
     so ever.
   - It should be noted that this mechnism is mostly redundant as we
     have an XL lock on the trashlast field. But locking the trashlast
     field - by definition - doesn't prevent other jobs from adding
     pages, only from other jobs from adding pages to be used as blank
     space. We must lock this for means of having consistent offsetids
     for the object pages.
   - Also it should be noted that, at this time, there is no need to
     place any SH locks on ref0c. ref0c should only ever be updated at
     the very end of this process so any reads of refc will be
     truthful.
 2. Create the (currently unreferenced) object pages
 3. Look at the entry's =lastlookup=, aquire an [[LLOOKUP_NEW]](xl) on
    that lookup page.
    - The reason why we don't aquire an [[LLOOKUP_EXISTING]](xl) is
      because lookups should still be able to happen (via
      Object-Reading/Object-Writing). But with this XL lock the only
      thing we seek to block are other attempts to modify the lookup
      pages.
 4. If this lookup is not full: refernece the object pages and the
    increment the =ref0c=. If the this lookup is full:
    1. release the [[LLOOKUP_NEW]] and unload this lookup.
	2. Create a sibling for the lookup we just unloaded.
       - While creating this sibling, you should set the first
         reference of that sibling. This first reference will either
         be the object pages if this sibling is leaf bearing, or will
         be the child lookup page created in a previous iteration.
    3. follow up to this lookup's parent by aquiring a [[LLOOKUP_NEW]](xl)
       on it.
    4. If this parent is also full: go back to step 4.1 and
       repeat. You will do this recurisvely until the parent is not
       full: to which you reference the created sibling in the parent
       and continue to the next step.
 5. Release [[LREF0C]].
 6. Update =trashlast=.
 7. Go back and continue to follow instrunctions in [[Auto ID Creation]].
  
** Object-Deleting
"Object-Deleting" will be defined as marking the row as deleted,
meaning putting it into trash circulaiton.


 1. Aquire [[LENTRY]](sh).
 2. Then perform the b-tree lookup using valid [[LLOOKUP_EXISTING]](sh)
    lookups. Apply these locks before you load each lookup page. And
    once you get the next reference, place the [[LLOOKUP_EXISTING]](sh) on
    the next lookup page, then you can safely remove and deload the
    parent lookup (Weave Lock).
 3. On the final lookup, with the leaf node page id aquired, place a
    [[LROW]](xl) on the row you need and load that page.

 2. /While the page is loaded/ aquire a [[LTRASHOFF]](xl).
    - This will prevent Object-Creation workers as well as other
      Object-Deleting workers from corrupting the cycle.
    - I emphasize "/while the page is loaded/" because its contrary to
      Object-Creation: which must lock =trashstart_off= before the
      page loads. This contradiction (as of now) is strictly for the
      persuit of better engineering. It's always better to install
      locks before loading the page for swifter performace across
      threads. But in this case we already have the page loaded
      because we firstly needed to verify that the record exists at
      all (versus Object-Creation where we know it already exists).
 3. Put the object in the page's trash management linked list (See
    Deleting in the Object trash managmement spec).
 5. Release [[LTRASHOFF]]
 6. Release [[LROW]]
 7. if the page's =trashc= has reached a critical value (see
    discussion in Deleting in object trash managmenet) then:
   1. aquire a [[LENTTRASH]]
      - This XL lock will prevent anyone from touching our page's
        =trashvor= and the entry's =trashlast= needed for the next
        step.
   2. Update the page's =trashvor= to be the previous =trashlast= and
      set the =trashlast= to be the page's =trashvor=.
 8. Release [[LENTRY]].
* Defraging

Notes: PAGE-BASED CLUTCH LOCKS DONT WORK, a dead lock can happen
unless we guarentee that all pages per-entry are in order. Entry based
clutch locks are faster, easier, and defragging is rare so their
interuption-capabilities are worth it.

 1. go through all the pages and put a clutch lock on all relevant
    entries. it is important that you put the clutch locks on in
    accending order of 

hmmmmmm... why don't just put clutch locks in each page header? and
then put a massive lock over the whole range? the header lock will be
the clutch and when there's no more locks being placed the large lock
will be installed... BUT: we must test to make sure that all the
smaller clutch locks will be consolidated into the large lock (note
that all locks are installed via the same discriptor).

 2. Place an xl lock over the entire area and wait
 3. Once the lock is obtained 
