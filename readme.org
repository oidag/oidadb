* My rules for c programming

 - all files that are in the same directory are files that are known
   to share a /Domain/. A given Domain can be designated a /Build
   Target/.
 - all files that begin with the same string of characters in the same
   Domain are known as a /Namespace/. All Namespaces have a single
   =.h= file that can be included outside of the Namespace.
   - Optionally, some Namespaces may have =.h= files that contain the
     same prefix as the master header, followed by a dash (-) and some
     other stuff. This is callled a =Subnamespace=. (ie:
     =edbs-jobs.h=)
 - A Domain inside of another Domain (a directory inside of a
   parent directory) is known as a /Child Domain/.
 - At no point should a =.c= file include another =.c= file.
 - Files that end with =_u.h= are known as utility headers. These
   files cannot be included in any file outside of the namespace.
 - All symbols in non-utility headers must begin with the same prefix
   as the rest of the Subnamespace. (Ie: =edbd_*= =edba_*=)
 - Each namespace may have its own rules as to what other namespaces
   its allowed to include so keep your eyes open.

* Build Targets

A given domain is a build target if it has one of the speical files:

 - =main.c= - this is an executable build target.
 - =*_main.c= - In some cases, a Domain may have multiple executables
   that can be generated, in this case each files with the =_main.c=
   suffix can be treated as a seperate entry point for the compiler,
   given that the compiler not include any of the other =_main.c=
   files.
 - =include/= - this is a library build target. Inside this folder are
   header files to be distributed.

** liboidadb
The big fucking library I'm making. The whole project.

** odbm
The (o)ida(db) (m)onitor. OpenGL graphical interface for monitoring
oidadb files.

 - apt install libgl1-mesa-dev xorg-dev
 - what ever deps are in go.src/go.module

** tests targets
Tests files for when you run `make test`. Also contains
benchmarks. Each test is a different =main()=. See [[Tests]].


* Tests

All tests are expected to be executed with the current working
directory set to the project root. Tests will offload all test files
in =build/test=.

All test files in =c.src/tests= that have the scheme
=##-(namespace)_##_t.c= will have a ~main~ defined in them and ready
to build. The first set of numbers is the priority of which it should
be tested (the lower the higher the priority), the default value
is 20. The second set of numbers is arbitary (to seperate test with
same namespace/priority).

Most of these test do NOT require a full library build. They will
pull in the =.h= files on their own in some casees for unit testing.

Each test will have a exit code of 1 if they failed and and all errornous
ouput will be exclusively through stderr. stdout will be used
liberally.

TEST IDEA: Create 2 database files: execute the exact same jobs
between them. Then close the databases' hosts. 0-out the database id
(in their respective header) and check to make sure their sha1s are
equal. The purpose is to prove that the same jobs will always provide
the same changes to the file. And the databases' only difference is
their unique db id.

* Links
  - Kanban: https://oidadb.youtrack.cloud/

  TODO: list dependances... see makelist.txt
  also: https://github.com/jtsiomb/libdrawtext



