* My rules for c programming

 - all files that are in the same directory are files that are known
   to share a /Domain/. A given Domain can be designated a /Build
   Target/.
 - all files that begin with the same string of characters in the same
   Domain are known as a /Namespace/. All Namespaces have a single
   =.h= file that can be included outside of the Namespace.
   - Optionally, some Namespaces may have =.h= files that contain the
     same prefix as the master header, followed by a dash (-) and some
     other stuff. This is callled a =Subnamespace=. (ie:
     =edbs-jobs.h=)
 - A Domain inside of another Domain (a directory inside of a
   parent directory) is known as a /Child Domain/.
 - At no point should a =.c= file include another =.c= file.
 - Files that end with =_u.h= are known as utility headers. These
   files cannot be included in any file outside of the namespace.
 - All symbols in non-utility headers must begin with the same prefix
   as the rest of the Subnamespace. (Ie: =edbd_*= =edba_*=)
 - Each namespace may have its own rules as to what other namespaces
   its allowed to include so keep your eyes open.

* Build Targets

A given domain is a build target if it has one of the speical files:

 - =main.c= - this is an executable build target.
 - =*_main.c= - In some cases, a Domain may have multiple executables
   that can be generated, in this case each files with the =_main.c=
   suffix can be treated as a seperate entry point for the compiler,
   given that the compiler not include any of the other =_main.c=
   files.
 - =include/= - this is a library build target. Inside this folder are
   header files to be distributed.

** liboidadb
The big fucking library I'm making. The whole project.

** odbm
The (o)ida(db) (m)onitor. OpenGL graphical interface for monitoring
oidadb files.

** tests targets
Tests files for when you run `make test`. Also contains
benchmarks. Each test is a different =main()=. See [[Tests]].


* Tests

All tests are expected to be executed with the current working
directory set to the project root. Tests will offload all test files
in =build/test=.

As you go down the lists the tests get more advanced. And they build
on top of eachother in the sense that when the simple tests pass, it's
assumed that the contents of the test will not fail in subsequent
tests.

All test files in =c.src/tests= that have the scheme
=t####_(testname).c= will have a ~main.c~ defined in them and ready
to build. You should do them in order for the full test.

Most of these test do NOT require a full library build. They will
pull in the c files on their own in some casees for unit testing.

Note that if the file isn't there but in here, its because I haven't
made it yet.

 - =t0001_io.c=: simply create and initialize new database file
   with nothing in it. Then reopen it, and close it.
 - =t0005_host.c=: host a file, and close it from another thread.
 - =t0006_hostactive.c=: host a file with workers, page buffer.
 - =t0007_hostmean.c=: deliberately try to break hosting parameters
   and make sure they all return errors.
 - =t0010_handles.c=: host a file, and in another thread connect to it
   with a host.
 - =t0032_mt-obj.c=: using multiple threads blasting a single object
   with write and read requests. Make sure the resulting object is
   what it needs to be.


* Links
  - Kanban: https://oidadb.youtrack.cloud/

  TODO: list dependances... see makelist.txt
  also: https://github.com/jtsiomb/libdrawtext



